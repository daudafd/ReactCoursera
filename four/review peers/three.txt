https://s3.amazonaws.com/coursera-uploads/peer-review/ed61456ea20e0c4be65711b32324808f/ActionTypes.js


export const ADD_COMMENT = 'ADD_COMMENT';
export const DISHES_LOADING = 'DISHES_LOADING';
export const DISHES_FAILED = 'DISHES_FAILED';
export const ADD_DISHES = 'ADD_DISHES';
export const ADD_COMMENTS = 'ADD_COMMENTS';
export const COMMENTS_FAILED = 'COMMENTS_FAILED';
export const PROMOS_LOADING = 'PROMOS_LOADING';
export const ADD_PROMOS = 'ADD_PROMOS';
export const PROMOS_FAILED = 'PROMOS_FAILED';
export const LEADERS_LOADING = 'LEADERS_LOADING';
export const ADD_LEADERS = 'ADD_LEADERS';
export const LEADERS_FAILED = 'LEADERS_FAILED';




https://s3.amazonaws.com/coursera-uploads/peer-review/6cbe72b7a82e7e862c45bc5fcd1e4be4/ActionCreators.js


import * as ActionTypes from './ActionTypes';
import { baseUrl } from '../shared/baseUrl';

export const addComment = (comment) => ({
  type: ActionTypes.ADD_COMMENT,
  payload: comment
});

export const fetchDishes = () => (dispatch) => {
    dispatch(dishesLoading(true));

    return fetch(baseUrl + 'dishes')
        .then(response => {
          if (response.ok) {
            return response;
          }
          else {
            var error = new Error('Error '+response.status+': '+response.statusText);
            error.response = response;
            throw error;
          }
        },
        error => {
          var err = new Error(error.message);
          throw err;
        })
        .then(response => response.json())
        .then(dishes => dispatch(addDishes(dishes)))
        .catch(error => dispatch(dishesFailed(error.message)));
}

export const dishesLoading = () => ({
    type: ActionTypes.DISHES_LOADING
});

export const dishesFailed = (errmess) => ({
    type: ActionTypes.DISHES_FAILED,
    payload: errmess
});

export const addDishes = (dishes) => ({
    type: ActionTypes.ADD_DISHES,
    payload: dishes
});

export const fetchComments = () => (dispatch) => {
    return fetch(baseUrl + 'comments')
        .then(response => {
          if (response.ok) {
            return response;
          }
          else {
            var error = new Error('Error '+response.status+': '+response.statusText);
            error.response = response;
            throw error;
          }
        },
        error => {
          var err = new Error(error.message);
          throw err;
        })
        .then(response => response.json())
        .then(comments => dispatch(addComments(comments)))
        .catch(error => dispatch(commentsFailed(error.message)));
}

export const commentsFailed = (errmess) => ({
    type: ActionTypes.COMMENTS_FAILED,
    payload: errmess
});

export const addComments = (comments) => ({
    type: ActionTypes.ADD_COMMENTS,
    payload: comments
});

export const postComment = (dishId, rating, author, comment) => (dispatch) => {

    const newComment = {
        dishId: dishId,
        rating: rating,
        author: author,
        comment: comment
    };
    newComment.date = new Date().toISOString();

    return fetch(baseUrl + 'comments', {
        method: "POST",
        body: JSON.stringify(newComment),
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "same-origin"
    })
    .then(response => {
        if (response.ok) {
          return response;
        } else {
          var error = new Error('Error ' + response.status + ': ' + response.statusText);
          error.response = response;
          throw error;
        }
      },
      error => {
            throw error;
      })
    .then(response => response.json())
    .then(response => dispatch(addComment(response)))
    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\nError: '+error.message); });
};

export const fetchPromos = () => (dispatch) => {
    dispatch(promosLoading(true));

    return fetch(baseUrl + 'promotions')
        .then(response => {
          if (response.ok) {
            return response;
          }
          else {
            var error = new Error('Error '+response.status+': '+response.statusText);
            error.response = response;
            throw error;
          }
        },
        error => {
          var err = new Error(error.message);
          throw err;
        })
        .then(response => response.json())
        .then(promos => dispatch(addPromos(promos)))
        .catch(error => dispatch(promosFailed(error.message)));
}

export const promosLoading = () => ({
    type: ActionTypes.PROMOS_LOADING
});

export const promosFailed = (errmess) => ({
    type: ActionTypes.PROMOS_FAILED,
    payload: errmess
});

export const addPromos = (promos) => ({
    type: ActionTypes.ADD_PROMOS,
    payload: promos
});

export const fetchLeaders = () => (dispatch) => {
    dispatch(leadersLoading(true));

    return fetch(baseUrl + 'leaders')
        .then(response => {
          if (response.ok) {
            return response;
          }
          else {
            var error = new Error('Error '+response.status+': '+response.statusText);
            error.response = response;
            throw error;
          }
        },
        error => {
          var err = new Error(error.message);
          throw err;
        })
        .then(response => response.json())
        .then(leaders => dispatch(addLeaders(leaders)))
        .catch(error => dispatch(leadersFailed(error.message)));
}

export const leadersLoading = () => ({
    type: ActionTypes.LEADERS_LOADING
});

export const leadersFailed = (errmess) => ({
    type: ActionTypes.LEADERS_FAILED,
    payload: errmess
});

export const addLeaders = (leaders) => ({
    type: ActionTypes.ADD_LEADERS,
    payload: leaders
});

export const postFeedback = (feedback) => (dispatch) => {    

    return fetch(baseUrl + 'feedback', {
        method: "POST",
        body: JSON.stringify(feedback),
        headers: {
          "Content-Type": "application/json"
        },
        credentials: "same-origin"
    })
    .then(response => {
        if (response.ok) {
          return response;
        } else {
          var error = new Error('Error ' + response.status + ': ' + response.statusText);
          error.response = response;
          throw error;
        }
      },
      error => {
            throw error;
      })
    .then(response => response.json())
    .then(response => alert(JSON.stringify(response)))
    .catch(error =>  { console.log('post feedback', error.message); alert('Your feedback could not be posted\nError: '+error.message); });
};






https://s3.amazonaws.com/coursera-uploads/peer-review/b6ffca1fb666a0c17d19a00d2b658850/leaders.js


import * as ActionTypes from './ActionTypes';

export const Leaders = (state = { isLoading: true,
    errMess: null,
    leaders:[]}, action) => {
  switch(action.type) {
    case ActionTypes.ADD_LEADERS:
        return {...state, isLoading: false, errMess: null, leaders: action.payload};

    case ActionTypes.LEADERS_LOADING:
        return {...state, isLoading: true, errMess: null, leaders: []}

    case ActionTypes.LEADERS_FAILED:
        return {...state, isLoading: false, errMess: action.payload};

    default:
      return state;
  }
}





https://s3.amazonaws.com/coursera-uploads/peer-review/564fd2ec6540deed2ca044beedf51fc8/MainComponent.js





import React, { Component } from 'react';
import Home from './HomeComponent.js';
import Menu from './MenuComponent.js';
import About from './AboutComponent.js';
import Contact from './ContactComponent.js';
import Header from './HeaderComponent.js';
import Footer from './FooterComponent.js';
import DishDetail from './DishdetailComponent.js';
import { Switch, Route, Redirect, withRouter } from 'react-router-dom';
import { connect } from 'react-redux';
import { postComment, fetchDishes, fetchComments, fetchPromos, fetchLeaders, postFeedback } from '../redux/ActionCreators';
import { actions } from 'react-redux-form';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

const mapStateToProps = state => {
  return {
    dishes: state.dishes,
    comments: state.comments,
    promotions: state.promotions,
    leaders: state.leaders
  }
}

const mapDispatchToProps = (dispatch) => ({
  postComment: (dishId, rating, author, comment) => dispatch(postComment(dishId, rating, author, comment)),
  fetchDishes: () => {dispatch(fetchDishes())},
  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},
  fetchComments: () => {dispatch(fetchComments())},
  fetchPromos: () => {dispatch(fetchPromos())},
  fetchLeaders: () => {dispatch(fetchLeaders())},
  postFeedback: (feedback) => dispatch(postFeedback(feedback))
})

class Main extends Component {

  componentDidMount() {
    this.props.fetchDishes();
    this.props.fetchComments();
    this.props.fetchPromos();
    this.props.fetchLeaders();
  }

  render() {

    const HomePage = () => {
      return(
        <Home dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}
          dishesLoading={this.props.dishes.isLoading}
          dishesErrMess={this.props.dishes.errMess}
          promotion={this.props.promotions.promotions.filter((promotion) => promotion.featured)[0]}
          promosLoading={this.props.promotions.isLoading}
          promosErrMess={this.props.promotions.errMess}
          leader={this.props.leaders.leaders.filter((leader) => leader.featured)[0]}
          leadersLoading={this.props.leaders.isLoading}
          leadersErrMess={this.props.leaders.errMess}
        />
      );
    }

    const DishWithId = ({match}) => {
      console.log('isLoading before dish detail: ' + this.props.dishes.isLoading)
      return(
        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}
          isLoading={this.props.dishes.isLoading}
          errMess={this.props.dishes.errMess}
          comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}
          postComment={this.props.postComment}
          />
      );
    }

    return (
      <div>
        <Header />
        <TransitionGroup>
          <CSSTransition key={this.props.location.key} classNames="page" timeout={300}>
            <Switch>
              <Route path="/home" component={HomePage} />
              <Route path="/aboutus" component={() => <About leaders={this.props.leaders} />} />
              <Route exact path="/menu" component={() => <Menu dishes={this.props.dishes} />} />
              <Route path="/menu/:dishId" component={DishWithId} />
              <Route exact path="/contactus" component={() =>
                  <Contact resetFeedbackForm={this.props.resetFeedbackForm}
                    postFeedback={this.props.postFeedback} />} />
              <Redirect to="/home" />
            </Switch>
          </CSSTransition>
        </TransitionGroup>
        <Footer />
      </div>
    );
  }
}

export default withRouter(connect(mapStateToProps,mapDispatchToProps)(Main));




https://s3.amazonaws.com/coursera-uploads/peer-review/096f308351a747a12d75e52698ee2785/HomeComponent.js



import React from 'react';
import { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle } from 'reactstrap';
import { Loading } from './LoadingComponent';
import { baseUrl } from '../shared/baseUrl';
import { FadeTransform } from 'react-animation-components';

function RenderCard({item, isLoading, errMess}){
  if(isLoading) {
    return(
      <Loading />
    );
  } else if(errMess) {
    return(
      <h4>{errMess}</h4>
    );
  } else
      return(
        <FadeTransform in
          transformProps={{
            exitTransform: 'scale(0.5) translateY(-50%)'
          }}>
            <Card>
              <CardImg src={baseUrl + item.image} alt={item.name} />
              <CardBody>
                <CardTitle>{item.name}</CardTitle>
                { item.designation ? <CardSubtitle>{item.designation}</CardSubtitle> : null }
                <CardText>{item.description}</CardText>
              </CardBody>
            </Card>
        </FadeTransform>
      );
}

function Home(props){
  return(
    <div className="container">
      <div className="row align-items-start">
        <div className="col-12 col-md m-1">
          <RenderCard item={props.dish} isLoading={props.dishesLoading}
            errMess={props.dishesErrMess} />
        </div>
        <div className="col-12 col-md m-1">
          <RenderCard item={props.promotion} isLoading={props.promosLoading}
            errMess={props.promosErrMess} />
        </div>
        <div className="col-12 col-md m-1">
          <RenderCard item={props.leader} isLoading={props.leadersLoading}
            errMess={props.leadersErrMess} />
        </div>
      </div>
    </div>
  );
}

export default Home;




https://s3.amazonaws.com/coursera-uploads/peer-review/a2ad422b06bb50cc997d4b1b4de2a249/AboutComponent.js




import React from 'react';
import { Breadcrumb, BreadcrumbItem, Card, CardBody, CardHeader, Media } from 'reactstrap';
import { Link } from 'react-router-dom';
import { baseUrl } from '../shared/baseUrl';
import { Loading } from './LoadingComponent';
import { Fade, Stagger } from 'react-animation-components'

function RenderLeader({leaders, isLoading, errMess}){
  console.log('render leader isLoading: '+isLoading);
  if(isLoading) {
    return(
        <div className="container">
            <div className="row">
                <Loading />
            </div>
        </div>
    );
  }else if(errMess) {
    return(
        <div className="container">
            <div className="row">
                <div className="col-12">
                    <h4>{errMess}</h4>
                </div>
            </div>
        </div>
    );
  }else {
    return(
      <Media list>
          <Stagger delay={200} in>
            {leaders.map((leader) => {
              return(
                <Fade in>
                  <div key={leader.id} className="col-12 mt-5">
                    <Media tag="li">
                      <Media left middle>
                        <Media object src={baseUrl + leader.image} alt={leader.name} />
                      </Media>
                      <Media body className="ml-5">
                        <Media heading>{leader.name}</Media>
                        <p>{leader.designation}</p>
                        <p>{leader.description}</p>
                      </Media>
                    </Media>
                  </div>
                </Fade>
              );
            })}
          </Stagger>
      </Media>
    );
  }
}

function About(props) {

    return(
        <div className="container">
            <div className="row">
                <Breadcrumb>
                    <BreadcrumbItem><Link to="/home">Home</Link></BreadcrumbItem>
                    <BreadcrumbItem active>About Us</BreadcrumbItem>
                </Breadcrumb>
                <div className="col-12">
                    <h3>About Us</h3>
                    <hr />
                </div>
            </div>
            <div className="row row-content">
                <div className="col-12 col-md-6">
                    <h2>Our History</h2>
                    <p>Started in 2010, Ristorante con Fusion quickly established itself as a culinary icon par excellence in Hong Kong. With its unique brand of world fusion cuisine that can be found nowhere else, it enjoys patronage from the A-list clientele in Hong Kong.  Featuring four of the best three-star Michelin chefs in the world, you never know what will arrive on your plate the next time you visit us.</p>
                    <p>The restaurant traces its humble beginnings to <em>The Frying Pan</em>, a successful chain started by our CEO, Mr. Peter Pan, that featured for the first time the world's best cuisines in a pan.</p>
                </div>
                <div className="col-12 col-md-5">
                    <Card>
                        <CardHeader className="bg-primary text-white">Facts At a Glance</CardHeader>
                        <CardBody>
                            <dl className="row p-1">
                                <dt className="col-6">Started</dt>
                                <dd className="col-6">3 Feb. 2013</dd>
                                <dt className="col-6">Major Stake Holder</dt>
                                <dd className="col-6">HK Fine Foods Inc.</dd>
                                <dt className="col-6">Last Year's Turnover</dt>
                                <dd className="col-6">$1,250,375</dd>
                                <dt className="col-6">Employees</dt>
                                <dd className="col-6">40</dd>
                            </dl>
                        </CardBody>
                    </Card>
                </div>
                <div className="col-12">
                    <Card>
                        <CardBody className="bg-faded">
                            <blockquote className="blockquote">
                                <p className="mb-0">You better cut the pizza in four pieces because
                                    I'm not hungry enough to eat six.</p>
                                <footer className="blockquote-footer">Yogi Berra,
                                <cite title="Source Title">The Wit and Wisdom of Yogi Berra,
                                    P. Pepe, Diversion Books, 2014</cite>
                                </footer>
                            </blockquote>
                        </CardBody>
                    </Card>
                </div>
            </div>
            <div className="row row-content">
                <div className="col-12">
                    <h2>Corporate Leadership</h2>
                </div>
                <RenderLeader leaders={props.leaders.leaders} isLoading={props.leaders.isLoading}
                  errMess={props.leaders.errMess} />
            </div>

        </div>
    );
}

export default About;






https://s3.amazonaws.com/coursera-uploads/peer-review/686fb83d5a1df0b9bb54184321af827a/ContactComponent.js





import React, { Component } from 'react';
import { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from 'reactstrap';
import { Control, Form, Errors, actions } from 'react-redux-form';
import { Link } from 'react-router-dom';

const required = (val) => val && val.length;
const maxLength = (len) => (val) => !(val) || (val.length <= len);
const minLength = (len) => (val) => val && (val.length >= len);
const isNumber = (val) => !isNaN(Number(val));
const validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i.test(val);

class Contact extends Component {

  constructor(props) {
    super(props);

    this.handleSubmit = this.handleSubmit.bind(this);
  }

  handleSubmit(values) {
    alert("Current state is: " + JSON.stringify(values));
    var date = new Date().toISOString();
    var feedback = {...values, date };
    this.props.postFeedback(feedback);
    this.props.resetFeedbackForm();
  }

  render() {

    return(
        <div className="container">
            <div className="row">
              <Breadcrumb>
                <BreadcrumbItem><Link to="/home">Home</Link></BreadcrumbItem>
                <BreadcrumbItem active>Contact Us</BreadcrumbItem>
              </Breadcrumb>
              <div className="col-12">
                <h3>Contact Us</h3>
                <hr/>
              </div>
            </div>
            <div className="row row-content">
                <div className="col-12">
                <h3>Location Information</h3>
                </div>
                <div className="col-12 col-sm-4 offset-sm-1">
                        <h5>Our Address</h5>
                        <address>
                        121, Clear Water Bay Road<br />
                        Clear Water Bay, Kowloon<br />
                        HONG KONG<br />
                        <i className="fa fa-phone"></i>: +852 1234 5678<br />
                        <i className="fa fa-fax"></i>: +852 8765 4321<br />
                        <i className="fa fa-envelope"></i>: <a href="mailto:confusion@food.net">confusion@food.net</a>
                        </address>
                </div>
                <div className="col-12 col-sm-6 offset-sm-1">
                    <h5>Map of our Location</h5>
                </div>
                <div className="col-12 col-sm-11 offset-sm-1">
                    <div className="btn-group" role="group">
                        <a role="button" className="btn btn-primary" href="tel:+85212345678"><i className="fa fa-phone"></i> Call</a>
                        <a role="button" className="btn btn-info"><i className="fa fa-skype"></i> Skype</a>
                        <a role="button" className="btn btn-success" href="mailto:confusion@food.net"><i className="fa fa-envelope-o"></i> Email</a>
                    </div>
                </div>
            </div>
            <div className="row row-content">
              <div className="col-12">
                <h3>Send us Your Feedback</h3>
              </div>
              <div className="col-12 col-md-9">
                <Form model="feedback" onSubmit={(values) => this.handleSubmit(values)}>
                  <Row className="form-group">
                    <Label htmlFor="firstname" md={2}>First Name</Label>
                    <Col md={10}>
                      <Control.text model=".firstname" id="firstname" name="firstname"
                        placeholder="First Name"
                        className="form-control"
                        validators={{
                              required, minLength: minLength(3), maxLength: maxLength(15)
                          }}
                           />
                      <Errors
                          className="text-danger"
                          model=".firstname"
                          show="touched"
                          messages={{
                              required: 'Required',
                              minLength: 'Must be greater than 2 characters',
                              maxLength: 'Must be 15 characters or less'
                          }}
                       />
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Label htmlFor="lastname" md={2}>Last Name</Label>
                    <Col md={10}>
                      <Control.text model=".lastname" id="lastname" name="lastname"
                        placeholder="Last Name"
                        className="form-control"
                        validators={{
                          required, minLength: minLength(3), maxLength: maxLength(15)
                        }}
                       />
                      <Errors
                      className="text-danger"
                      model=".lastname"
                      show="touched"
                      messages={{
                          required: 'Required',
                          minLength: 'Must be greater than 2 characters',
                          maxLength: 'Must be 15 characters or less'
                      }}
                      />
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Label htmlFor="telnum" md={2}>Contact Tel.</Label>
                    <Col md={10}>
                      <Control.text model=".telnum" id="telnum" name="telnum"
                        placeholder="Tel. Number"
                        className="form-control"
                        validators={{
                              required, minLength: minLength(3), maxLength: maxLength(15), isNumber
                          }}
                      />
                      <Errors
                          className="text-danger"
                          model=".telnum"
                          show="touched"
                          messages={{
                              required: 'Required',
                              minLength: 'Must be greater than 2 numbers',
                              maxLength: 'Must be 15 numbers or less',
                              isNumber: 'Must be a number'
                          }}
                       />
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Label htmlFor="email" md={2}>Email</Label>
                    <Col md={10}>
                      <Control.text model=".email" id="email" name="email"
                        placeholder="Email"
                        className="form-control"
                        validators={{
                              required, validEmail
                          }}
                        />
                      <Errors
                          className="text-danger"
                          model=".email"
                          show="touched"
                          messages={{
                              required: 'Required',
                              validEmail: 'Invalid Email Address'
                          }}
                       />
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Col md={{size: 6, offset: 2}}>
                      <div className="form-check" >
                        <Label check>
                          <Control.checkbox model=".agree" name="agree"
                            className="form-check-input" /> {' '}
                            <strong>May we contact you?</strong>
                        </Label>
                      </div>
                    </Col>
                    <Col md={{size: 3, offset: 1}}>
                      <Control.select model=".contactType" name="contactType"
                           className="form-control">
                           <option>Tel.</option>
                           <option>Email</option>
                       </Control.select>
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Label htmlFor="message" md={2}>Your Feedback</Label>
                    <Col md={10}>
                      <Control.textarea model=".message" id="message" name="message"
                          rows="12"
                          className="form-control" />
                    </Col>
                  </Row>
                  <Row className="form-group">
                    <Col md={{size:10, offset: 2}}>
                      <Button type="submit" color="primary">
                        Send Feedback
                      </Button>
                    </Col>
                  </Row>
                </Form>
              </div>
            </div>
        </div>
    );
  }

}

export default Contact;